@page "/weather"
@rendermode InteractiveServer  

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>


<p><strong>Ciepłych dni: @warmDays</strong></p>

<input class="form-control" placeholder="Filtruj po Summary..." @oninput="Input" />


<button class="btn btn-primary m-2" @onclick="WarmDaysFilter">Pokaż tylko ciepłe dni</button>


<button class="btn btn-secondary m-2" @onclick="Restore">Przywróć wszystkie</button>

@if (filteredForecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
           
            @foreach (var forecast in filteredForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;          
    private WeatherForecast[]? filteredForecasts;  
    private int warmDays;                          

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); 

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

       
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        filteredForecasts = forecasts;  
        warmDays = forecasts.Count(f => f.TemperatureC > 15); 
    }

  
    private void WarmDaysFilter()
    {
        if (forecasts is null) return;
        filteredForecasts = forecasts.Where(f => f.TemperatureC > 15).ToArray();
    }

    
    private void Restore()
    {
        filteredForecasts = forecasts;
    }


    private void Input(ChangeEventArgs e)
    {
        var text = e.Value?.ToString()?.ToLower() ?? "";
        filteredForecasts = forecasts?
            .Where(f => f.Summary?.ToLower().Contains(text) == true)
            .ToArray();
    }

    
    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
